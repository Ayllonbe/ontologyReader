return(self$ids[self$termobj[[term]]$descendants])
}
),
private = list(
termobj = NULL,
alternativeIDs = NULL
)
)
onto <- ontoClass$new(go)
ontoClass <- R6Class("ontology", public = list(
ids= NULL,
initialize = function(Obj) {
stopifnot(length(Obj) == 3)
stopifnot(typeof(Obj)=="list")
private$termobj <- Obj$termOBJ
private$alternativeIDs <- Obj$alternativeIDs
self$ids <- Obj$name
invisible(self)
},
print = function(...) {
cat("ontoClass: \n")
cat("  Number of onto terms: ", length(self$ids), "\n", sep = "")
invisible(self)
},
children = function(term){
return(self$ids[private$termobj[[term]]$children])
},
parents = function(term){
return(self$ids[private$termobj[[term]]$parents])
},
ancestors = function(term){
return(self$ids[private$termobj[[term]]$ancestors])
},
descendants = function(term){
return(self$ids[private$termobj[[term]]$descendants])
}
),
private = list(
termobj = NULL,
alternativeIDs = NULL
)
)
onto <- ontoClass$new(go)
ontoClass <- R6Class("ontology", public = list(
ids= NULL,
initialize = function(Obj) {
stopifnot(length(Obj) == 3)
stopifnot(typeof(Obj)=="list")
private$termobj <- Obj$termOBJ
private$alternativeIDs <- Obj$alternativeIDs
self$ids <- Obj$name
invisible(self)
},
print = function(...) {
cat("ontoClass: \n")
cat("  Number of onto terms: ", length(self$ids), "\n", sep = "")
invisible(self)
},
children = function(term){
return(self$ids[private$termobj[[term]]$children])
},
parents = function(term){
return(self$ids[private$termobj[[term]]$parents])
},
ancestors = function(term){
return(self$ids[private$termobj[[term]]$ancestors])
},
descendants = function(term){
return(self$ids[private$termobj[[term]]$descendants])
},
depth = function(term) {
return(private$termobj$depth)
},
top=function(term){
return(private$termobj$top)
},
name=function(term){
return(private$termobj$name)
}
),
private = list(
termobj = NULL,
alternativeIDs = NULL
)
)
onto <- ontoClass$new(go)
onto$print()
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
devtools::document()
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
devtools::document()
devtools::document()
devtools::document()
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
onto <- ontoClass$new(go)
onto$ids
cppFunction("
{
return result;
)
))
")"
")
cppFunction("
bool isOddCpp(int num = 10)
{
bool result = (num % 2 == 1);
return result;
}")
isOddCpp(5)
isOddCpp(6)
onto$children("GO:0097194")
onto$children("GO:0006915")
go$termOBJ[[GO:0097194]]
go$termOBJ[["GO:0097194"]]
cppFunction("
vector<long double> goUniverseIC(string t,List ontology){
long double alpha = 1.;
long double beta = 0.;
for(size_t par : ontology[t]['parents']) {
cout << par <<endl();
}
}")
cppFunction("
vector<long double> goUniverseIC(string t,List ontology){
long double alpha = 1.;
long double beta = 0.;
for(size_t par : ontology[t]["parents"]) {
cout << par <<endl();
}
}")
cppFunction("
vector<long double> goUniverseIC(string t,List ontology){
long double alpha = 1.;
long double beta = 0.;
for(size_t par : ontology[t][\"parents\"]) {
cout << par <<endl();
}
}")
cppFunction("
std::vector<long double> goUniverseIC(std::string t,List ontology){
long double alpha = 1.;
long double beta = 0.;
for(size_t par : ontology[t][\"parents\"]) {
cout << par <<endl();
}
}")
Rcpp::sourceCpp('src/ontologyReader.cpp')
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0006915",go$termOBJ)
goUniverseIC("GO:0001781",go$termOBJ)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name)
goUniverseIC("GO:0001781",go$termOBJ,go$name)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name)
goUniverseIC("GO:0001781",go$termOBJ,go$name)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name)
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
top <- go$termOBJ[["GO:0001781"]]
ontoCh <- length(go$termOBJ[[top]][['children']])
ontoCh <- length(go$termOBJ[[top]][["children"]])
top
top <- go$termOBJ[["GO:0001781"]][["top"]]
top
ontoCh <- length(go$termOBJ[[top]][["children"]])
ontoCh
goUniverseIC("GO:0001781",go$termOBJ,go$name,top,ontoCh)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name,top,ontoCh)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name,top,ontoCh)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name,top,ontoCh)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name,top,ontoCh)
Rcpp::sourceCpp('src/functions.cpp')
goUniverseIC("GO:0001781",go$termOBJ,go$name,top,ontoCh)
test <- lapply(go$name, function(x){
top <- go$termOBJ[[x]][["top"]]
ontoCh <- length( go$termOBJ[[top]][["children"]])
goUniverseIC(x,go$termOBJ,go$name,top,ontoCh)
}
)
test <- lapply(go$name, function(x){
top <- go$termOBJ[[x]][["top"]]
print(top)
ontoCh <- length( go$termOBJ[[top]][["children"]])
goUniverseIC(x,go$termOBJ,go$name,top,ontoCh)
}
)
test <- lapply(go$name, function(x){
top <- go$termOBJ[[x]][["top"]]
print(top)
ontoCh <- length( go$termOBJ[[top]][["children"]])
goUniverseIC(x,go$termOBJ,go$name,top,ontoCh)
})
test <- lapply(go$name, function(x){
top <- go$termOBJ[[x]][["top"]]
print(x)
ontoCh <- length( go$termOBJ[[top]][["children"]])
goUniverseIC(x,go$termOBJ,go$name,top,ontoCh)
})
test <- lapply(go$name, function(x){
top <- go$termOBJ[[x]][["top"]]
if(!is.null(top)){
ontoCh <- length( go$termOBJ[[top]][["children"]])
return(goUniverseIC(x,go$termOBJ,go$name,top,ontoCh))
}})
leaves <- unlist(lapply(go$name, function(x){}))
leaves <- unlist(lapply(go$name, function(x){
return(go$termOBJ[[x]][["children"]]<0)
}))
length(go$name)
length(go$name[leaves==TRUE])
leaves <- unlist(lapply(go$name, function(x){
return(go$termOBJ[[x]][["children"]]==0)
}))
length(go$name[leaves==TRUE])
length(go$name[leaves==TRUE])
length(go$name[leaves==TRUE])
leaves
leaves <- unlist(lapply(go$name, function(x){
return(length(go$termOBJ[[x]][["children"]])==0)
}))
leaves
length(go$name[leaves==TRUE])
test <- lapply(go$name[leaves==TRUE], function(x){
top <- go$termOBJ[[x]][["top"]]
if(!is.null(top)){
ontoCh <- length( go$termOBJ[[top]][["children"]])
return(goUniverseIC(x,go$termOBJ,go$name,top,ontoCh))
}})
library(ontologyReader)
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
library(ontologyReader)
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
devtools::document()
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
devtools::document()
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
devtools::document()
Rcpp::sourceCpp('src/functions.cpp')
devtools::document()
library(ontologyReader)
devtools::document()
library(ontologyReader)
go <- ontologyReader::reader("../gni_predictors/data/go.obo")
Rcpp::sourceCpp('src/functions.cpp')
transformRobj2Term(go$termOBJ,go$name)
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
transformRobj2Term(go$termOBJ,go$name)
Rcpp::sourceCpp('src/functions.cpp')
transformRobj2Term(go$termOBJ,go$name)
start.time <- Sys.time()
end.time <- Sys.time()
start.time <- Sys.time()
transformRobj2Term(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
go$termOBJ[["GO:0006915"]]
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
go$termOBJ[["GO:0006915"]]
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
ics <- computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
ics <- computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
ics <- computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
ics
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
ics
start.time <- Sys.time()
ics <- computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
ics <- computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
ics <- computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Rcpp::sourceCpp('src/functions.cpp')
Rcpp::sourceCpp('src/functions.cpp')
start.time <- Sys.time()
ics <- computegoUIC(go$termOBJ,go$name)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
ics
ics[10000]
which(go$name[go$name=="GO:0006915"])
which(go$name=="GO:0006915")
go$name[[12059]]
#' @import R6
ontoClass <- R6Class("ontology", public = list(
ids= NULL,
initialize = function(Obj) {
stopifnot(length(Obj) == 3)
stopifnot(typeof(Obj)=="list")
private$termobj <- Obj$termOBJ
private$alternativeIDs <- Obj$alternativeIDs
private$ics <- computegoUIC(go$termOBJ,go$name)
self$ids <- Obj$name
invisible(self)
},
print = function(...) {
cat("ontoClass: \n")
cat("  Number of onto terms: ", length(self$ids), "\n", sep = "")
invisible(self)
},
children = function(term){
return(self$ids[private$termobj[[term]]$children])
},
parents = function(term){
return(self$ids[private$termobj[[term]]$parents])
},
ancestors = function(term){
return(self$ids[private$termobj[[term]]$ancestors])
},
descendants = function(term){
return(self$ids[private$termobj[[term]]$descendants])
},
depth = function(term) {
return(private$termobj$depth)
},
ic = function(term) {
return(private$ics[which(go$name==term)])
},
top=function(term){
return(private$termobj$top)
},
name=function(term){
return(private$termobj$name)
}
),
private = list(
termobj = NULL,
alternativeIDs = NULL
ics = NULL
)
)
#' @import R6
ontoClass <- R6Class("ontology", public = list(
ids= NULL,
initialize = function(Obj) {
stopifnot(length(Obj) == 3)
stopifnot(typeof(Obj)=="list")
private$termobj <- Obj$termOBJ
private$alternativeIDs <- Obj$alternativeIDs
private$ics <- computegoUIC(go$termOBJ,go$name)
self$ids <- Obj$name
invisible(self)
},
print = function(...) {
cat("ontoClass: \n")
cat("  Number of onto terms: ", length(self$ids), "\n", sep = "")
invisible(self)
},
children = function(term){
return(self$ids[private$termobj[[term]]$children])
},
parents = function(term){
return(self$ids[private$termobj[[term]]$parents])
},
ancestors = function(term){
return(self$ids[private$termobj[[term]]$ancestors])
},
descendants = function(term){
return(self$ids[private$termobj[[term]]$descendants])
},
depth = function(term) {
return(private$termobj$depth)
},
ic = function(term) {
return(private$ics[which(go$name==term)])
},
top=function(term){
return(private$termobj$top)
},
name=function(term){
return(private$termobj$name)
}
),
private = list(
termobj = NULL,
alternativeIDs = NULL
ics = NULL
)
)
#' @import R6
ontoClass <- R6Class("ontology", public = list(
ids= NULL,
initialize = function(Obj) {
stopifnot(length(Obj) == 3)
stopifnot(typeof(Obj)=="list")
private$termobj <- Obj$termOBJ
private$alternativeIDs <- Obj$alternativeIDs
private$ics <- computegoUIC(go$termOBJ,go$name)
self$ids <- Obj$name
invisible(self)
},
print = function(...) {
cat("ontoClass: \n")
cat("  Number of onto terms: ", length(self$ids), "\n", sep = "")
invisible(self)
},
children = function(term){
return(self$ids[private$termobj[[term]]$children])
},
parents = function(term){
return(self$ids[private$termobj[[term]]$parents])
},
ancestors = function(term){
return(self$ids[private$termobj[[term]]$ancestors])
},
descendants = function(term){
return(self$ids[private$termobj[[term]]$descendants])
},
depth = function(term) {
return(private$termobj$depth)
},
ic = function(term) {
return(private$ics[which(go$name==term)])
},
top=function(term){
return(private$termobj$top)
},
name=function(term){
return(private$termobj$name)
}
),
private = list(
termobj = NULL,
alternativeIDs = NULL,
ics = NULL
)
)
cl <- ontoClass$new(go)
cl$ic("GO:0006915")
cl$ic("GO:0008150")
cl$ic("GO:0006915")
cl$ic("GO:1902489")
cl$ic("GO:0001781")
Rcpp::sourceCpp('src/functions.cpp')
cl <- ontoClass$new(go)
Rcpp::sourceCpp('src/functions.cpp')
cl <- ontoClass$new(go)
